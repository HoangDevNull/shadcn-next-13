/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 ./public/cube.glb --transform -S -i -t
*/

import { MeshTransmissionMaterial, useGLTF } from '@react-three/drei';
import { useLoader } from '@react-three/fiber';
import React from 'react';
import type * as THREE from 'three';
import type { GLTF } from 'three-stdlib';
import { RGBELoader } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    defaultMaterial: THREE.Mesh;
  };
  materials: {};
};

export default function CubeModel(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models/cube.glb') as GLTFResult;

  const texture = useLoader(
    RGBELoader,
    'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr'
  );
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.defaultMaterial.geometry}>
        <MeshTransmissionMaterial
          backside={false}
          samples={1}
          resolution={768}
          transmission={0.95}
          roughness={0}
          clearcoat={0.1}
          clearcoatRoughness={0.1}
          thickness={0.4}
          ior={2.5}
          chromaticAberration={0}
          attenuationDistance={0.5}
          attenuationColor={'#000000'}
          color={'#ff00dd'}
          background={texture}
          distortionScale={0}
          temporalDistortion={0}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload('/models/cube.glb');
