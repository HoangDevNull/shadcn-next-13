/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 ./public/models/twitted_cube.gltf --transform -S -i -t
*/

import { MeshTransmissionMaterial, useGLTF } from '@react-three/drei';
import { useLoader } from '@react-three/fiber';
import React, { forwardRef } from 'react';
import type * as THREE from 'three';
import type { GLTF } from 'three-stdlib';
import { RGBELoader } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh;
  };
  materials: {};
};

type Props = {
  material?: THREE.Material | THREE.Material[] | undefined;
} & JSX.IntrinsicElements['group'];

const TwistedCube = forwardRef<THREE.Mesh, Props>(({ material, ...props }, ref) => {
  const { nodes } = useGLTF('/models/twisted_cube.glb') as GLTFResult;
  const texture = useLoader(
    RGBELoader,
    'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr'
  );

  return (
    <group {...props} dispose={null}>
      <mesh ref={ref} geometry={nodes.Cube.geometry} scale={0.15}>
        <MeshTransmissionMaterial
          backside={false}
          samples={6}
          resolution={256}
          transmission={0.95}
          roughness={0.4}
          clearcoat={0.1}
          clearcoatRoughness={0.1}
          thickness={50}
          backsideThickness={0}
          ior={1.5}
          chromaticAberration={0}
          anisotropy={1}
          distortion={0}
          distortionScale={0.2}
          temporalDistortion={0}
          attenuationDistance={0.5}
          attenuationColor={'#ffffff'}
          color={'#ffffff'}
          background={texture}
        />
      </mesh>
    </group>
  );
});

useGLTF.preload('/models/twisted_cube.glb');

export default TwistedCube;
